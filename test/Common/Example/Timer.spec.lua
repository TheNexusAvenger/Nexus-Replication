--[[
TheNexusAvenger

Tests the Timer class.
--]]
--!strict

local NexusReplicationModule = game:GetService("ReplicatedStorage"):WaitForChild("NexusReplication")
local NexusReplication = require(NexusReplicationModule)
local Timer = require(NexusReplicationModule:WaitForChild("Example"):WaitForChild("Timer"))

return function()
    local TestTimer = nil
    beforeEach(function()
        TestTimer = Timer.new()
    end)
    afterEach(function()
        TestTimer:Destroy()
    end)
    afterAll(function()
        NexusReplication:ClearInstances()
    end)

    describe("A timer instance", function()
        it("should start.", function()
            TestTimer:SetDuration(0.2)
            expect(TestTimer.State).to.equal("STOPPED")
            expect(TestTimer:GetRemainingTime()).to.be.near(0.2, 0.025)
            TestTimer:Start()
            expect(TestTimer.State).to.equal("ACTIVE")
            expect(TestTimer:GetRemainingTime()).to.be.near(0.2, 0.025)
            task.wait(0.1)
            expect(TestTimer.State).to.equal("ACTIVE")
            expect(TestTimer:GetRemainingTime()).to.be.near(0.1, 0.025)
            TestTimer:Start()
            task.wait(0.15)
            expect(TestTimer.State).to.equal("COMPLETE")
            expect(TestTimer:GetRemainingTime()).to.be.near(0, 0.025)
            TestTimer:Start()
            expect(TestTimer.State).to.equal("COMPLETE")
        end)

        it("should stop.", function()
            TestTimer:SetDuration(0.2)
            expect(TestTimer.State).to.equal("STOPPED")
            expect(TestTimer:GetRemainingTime()).to.be.near(0.2, 0.025)
            TestTimer:Start()
            expect(TestTimer.State).to.equal("ACTIVE")
            expect(TestTimer:GetRemainingTime()).to.be.near(0.2, 0.025)
            task.wait(0.1)
            TestTimer:Stop()
            expect(TestTimer.State).to.equal("STOPPED")
            expect(TestTimer:GetRemainingTime()).to.be.near(0.1, 0.025)
            task.wait(0.1)
            TestTimer:Start()
            expect(TestTimer.State).to.equal("ACTIVE")
            expect(TestTimer:GetRemainingTime()).to.be.near(0.1, 0.025)
            task.wait(0.05)
            expect(TestTimer.State).to.equal("ACTIVE")
            expect(TestTimer:GetRemainingTime()).to.be.near(0.05, 0.025)
            task.wait(0.1)
            expect(TestTimer.State).to.equal("COMPLETE")
            expect(TestTimer:GetRemainingTime()).to.be.near(0, 0.025)
            TestTimer:Start()
            expect(TestTimer.State).to.equal("COMPLETE")
            TestTimer:Stop()
            expect(TestTimer.State).to.equal("COMPLETE")
            expect(TestTimer:GetRemainingTime()).to.be.near(0, 0.025)
        end)

        it("should complete.", function()
            TestTimer:SetDuration(0.2)
            expect(TestTimer.State).to.equal("STOPPED")
            TestTimer:Start()
            task.wait(0.1)
            TestTimer:Complete()
            expect(TestTimer.State).to.equal("COMPLETE")
            expect(TestTimer:GetRemainingTime()).to.be.near(0, 0.025)
            task.wait(0.15)
            expect(TestTimer.State).to.equal("COMPLETE")
            expect(TestTimer:GetRemainingTime()).to.be.near(0, 0.025)
        end)
    end)
end